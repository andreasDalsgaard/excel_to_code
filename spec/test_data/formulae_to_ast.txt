# parses numbers
1	[:number, "1"]
103.287	[:number, "103.287"]
-1.0E-27	[:number, "-1.0E-27"]

# parses booleans
TRUE*FALSE	[:arithmetic, [:boolean_true], [:operator, "*"], [:boolean_false]]

# parses prefixes (+/-)
-(3-1)"	[:prefix, "-", [:brackets, [:arithmetic, [:number, "3"], [:operator, "-"], [:number, "1"]]]]

# parses percentages
1%"	[:percentage, "1"]
103.287%"	[:percentage, "103.287"]
-1.0%"	[:percentage, "-1.0"]

# parses strings
"A handy string"	[:string, "A handy string"]
"$A$1"	[:string, "$A$1"]
"Double quotes "" do not end strings."	 [:string, "Double quotes \"\" do not end strings."]
"A ""quote"""	 [:string, "A \"\"quote\"\""]

# parses simple references
$A$1	[:cell, "$A$1"]
A1	[:cell, "A1"]
$A1	[:cell, "$A1"]
A$1	[:cell, "A$1"]
AAA1123	[:cell, "AAA1123"]

# parses ranges
$A$1:$Z$1	[:area, "$A$1", "$Z$1"]
A1:$Z$1	[:area, "A1", "$Z$1"]
$1:$1000	[:row_range, "$1", "$1000"]
1000:1	[:row_range, "1000", "1"]
$C:$AZ	[:column_range, "$C", "$AZ"]
C:AZ	[:column_range, "C", "AZ"]

# But doesn't yet parse range unions
@NOT_IMPLEMENTED 10:10 C:C	[:range_union, [:row_range, "10", "10"], [:column_range, "C", "C"]]

# parses references to other sheets
sheet1!$A$1	[:sheet_reference, "sheet1", [:cell, "$A$1"]]
sheet1!$A$1:$Z$1	[:sheet_reference, "sheet1", [:area, "$A$1", "$Z$1"]]
sheet1!$1:$1000	[:sheet_reference, "sheet1", [:row_range, "$1", "$1000"]]
sheet1!$C:$AZ	[:sheet_reference, "sheet1", [:column_range, "$C", "$AZ"]]
Control!#REF!	[:sheet_reference, "Control", [:error, "#REF!"]]

# parses references to other sheets with extended names
'sheet 1'!$A$1"	[:sheet_reference, "sheet 1", [:cell, "$A$1"]]
'sheet 1'!$A$1:$Z$1"	[:sheet_reference, "sheet 1", [:area, "$A$1", "$Z$1"]]
'sheet 1'!$1:$1000"	[:sheet_reference, "sheet 1", [:row_range, "$1", "$1000"]]
'sheet 1'!$C:$AZ"	[:sheet_reference, "sheet 1", [:column_range, "$C", "$AZ"]]
'2007.0'!Year.Matrix"	[:sheet_reference, "2007.0", [:named_reference, "Year.Matrix"]]

# But doesn't yet parse wierd sheet references like this:
@NOT_IMPLEMENTED 'G.20 (data)'!Q1149:'G.20 (data)'!Q1153	[:sheet_reference, "G.20 (data)", [:area, "Q1149", "Q1153"]]

# parses external references
INDEX([1]!Modules[Module], MATCH($C5, [1]!Modules[Code], 0))	[:function, "INDEX", [:external_reference, "[1]!", [:table_reference, "Modules", "Module"]], [:function, "MATCH", [:cell, "$C5"], [:external_reference, "[1]!", [:table_reference, "Modules", "Code"]], [:number, "0"]]]
[0]!Preferences.EnergyUnits	[:external_reference, "[0]!", [:named_reference, "Preferences.EnergyUnits"]]

# parses named references
EF.NaturalGas.N2O	[:named_reference, "EF.NaturalGas.N2O"]
USD2009_	[:named_reference, "USD2009_"]
(F47*(USD2009_/Unit.boe))*(Price2009)	[:arithmetic, [:brackets, [:arithmetic, [:cell, "F47"], [:operator, "*"], [:brackets, [:arithmetic, [:named_reference, "USD2009_"], [:operator, "/"], [:named_reference, "Unit.boe"]]]]], [:operator, "*"], [:brackets, [:named_reference, "Price2009"]]]
排放.煤炭.CO2 [:named_reference, "排放.煤炭.CO2"]

# parses string joins
"A handy string"&$A$1	[:string_join, [:string, "A handy string"], [:cell, "$A$1"]]
$A$1&"A handy string"	[:string_join, [:cell, "$A$1"], [:string, "A handy string"]]
$A$1&"A handy string"&$A$1	[:string_join, [:cell, "$A$1"], [:string, "A handy string"], [:cell, "$A$1"]]
$A$1&$A$1&$A$1	[:string_join, [:cell, "$A$1"], [:cell, "$A$1"], [:cell, "$A$1"]]
"GW"&ISERR($AA$1)	[:string_join, [:string, "GW"], [:function, "ISERR", [:cell, "$AA$1"]]]
"Approximate total "&$F$87&" GW locations"	[:string_join, [:string, "Approximate total "], [:cell, "$F$87"], [:string, " GW locations"]]
"Approximate total "&$F$87/$F$87&" GW locations"	[:string_join, [:string, "Approximate total "], [:arithmetic, [:cell, "$F$87"], [:operator, "/"], [:cell, "$F$87"]], [:string, " GW locations"]]
"Approximate total "&$F$87/Unit.GW&" GW locations"	[:string_join, [:string, "Approximate total "], [:arithmetic, [:cell, "$F$87"], [:operator, "/"], [:named_reference, "Unit.GW"]], [:string, " GW locations"]]

# parses numeric operations
$A$1+$A$2+1	[:arithmetic, [:cell, "$A$1"], [:operator, "+"], [:cell, "$A$2"], [:operator, "+"], [:number, "1"]]
$A$1-$A$2-1	[:arithmetic, [:cell, "$A$1"], [:operator, "-"], [:cell, "$A$2"], [:operator, "-"], [:number, "1"]]
$A$1*$A$2*1	[:arithmetic, [:cell, "$A$1"], [:operator, "*"], [:cell, "$A$2"], [:operator, "*"], [:number, "1"]]
$A$1/$A$2/1	[:arithmetic, [:cell, "$A$1"], [:operator, "/"], [:cell, "$A$2"], [:operator, "/"], [:number, "1"]]
$A$1^$A$2^1	[:arithmetic, [:cell, "$A$1"], [:operator, "^"], [:cell, "$A$2"], [:operator, "^"], [:number, "1"]]
(1+$A$1*2)^$A$2^1	[:arithmetic, [:brackets, [:arithmetic, [:number, "1"], [:operator, "+"], [:cell, "$A$1"], [:operator, "*"], [:number, "2"]]], [:operator, "^"], [:cell, "$A$2"], [:operator, "^"], [:number, "1"]]

# parses expressions in brackets
($A$1+$A$2)	[:brackets, [:arithmetic, [:cell, "$A$1"], [:operator, "+"], [:cell, "$A$2"]]]
($A$1+$A$2)+2	[:arithmetic, [:brackets, [:arithmetic, [:cell, "$A$1"], [:operator, "+"], [:cell, "$A$2"]]], [:operator, "+"], [:number, "2"]]
($A$1+$A$2)+(2+(1*2))	[:arithmetic, [:brackets, [:arithmetic, [:cell, "$A$1"], [:operator, "+"], [:cell, "$A$2"]]], [:operator, "+"], [:brackets, [:arithmetic, [:number, "2"], [:operator, "+"], [:brackets, [:arithmetic, [:number, "1"], [:operator, "*"], [:number, "2"]]]]]]

# parses comparisons
$A$1>$A$2"	[:comparison, [:cell, "$A$1"], [:comparator, ">"], [:cell, "$A$2"]]
$A$1<$A$2"	[:comparison, [:cell, "$A$1"], [:comparator, "<"], [:cell, "$A$2"]]
$A$1=$A$2"	[:comparison, [:cell, "$A$1"], [:comparator, "="], [:cell, "$A$2"]]
$A$1>=$A$2	[:comparison, [:cell, "$A$1"], [:comparator, ">="], [:cell, "$A$2"]]
$A$1<=$A$2	[:comparison, [:cell, "$A$1"], [:comparator, "<="], [:cell, "$A$2"]]
$A$1<>$A$2	[:comparison, [:cell, "$A$1"], [:comparator, "<>"], [:cell, "$A$2"]]
IF(1+2>0, 1, 0)"	[:function, "IF", [:comparison, [:arithmetic, [:number, "1"], [:operator, "+"], [:number, "2"]], [:comparator, ">"], [:number, "0"]], [:number, "1"], [:number, "0"]]
IF(G431-F431+F450>0, G431-F431+F450, 0)"	[:function, "IF", [:comparison, [:arithmetic, [:cell, "G431"], [:operator, "-"], [:cell, "F431"], [:operator, "+"], [:cell, "F450"]], [:comparator, ">"], [:number, "0"]], [:arithmetic, [:cell, "G431"], [:operator, "-"], [:cell, "F431"], [:operator, "+"], [:cell, "F450"]], [:number, "0"]]

# parses functions
PI()	[:function, "PI"]
ERR($A$1)	[:function, "ERR", [:cell, "$A$1"]]
SUM($A$1, sheet1!$1:$1000, 1)"	[:function, "SUM", [:cell, "$A$1"], [:sheet_reference, "sheet1", [:row_range, "$1", "$1000"]], [:number, "1"]]
IF(A2="Hello", "hello", sheet1!B4)	[:function, "IF", [:comparison, [:cell, "A2"], [:comparator, "="], [:string, "Hello"]], [:string, "hello"], [:sheet_reference, "sheet1", [:cell, "B4"]]]
IF(a23>=(1.0+b38), 1.0, 2.0)	[:function, "IF", [:comparison, [:cell, "a23"], [:comparator, ">="], [:brackets, [:arithmetic, [:number, "1.0"], [:operator, "+"], [:cell, "b38"]]]], [:number, "1.0"], [:number, "2.0"]]

# parses fully qualified structured references (i.e., Table[column])
DeptSales[Sale Amount]	[:table_reference, "DeptSales", "Sale Amount"]
DeptSales[[#Totals],[ColA]]	[:table_reference, "DeptSales", "[#Totals],[ColA]"]
IV.Outputs[Vector]	[:table_reference, "IV.Outputs", "Vector"]
I.b.Outputs[2007.0]	[:table_reference, "I.b.Outputs", "2007.0"]
INDEX(Global.Assumptions[Households], MATCH(F$321, Global.Assumptions[Year], 0))"	[:function, "INDEX", [:table_reference, "Global.Assumptions", "Households"], [:function, "MATCH", [:cell, "F$321"], [:table_reference, "Global.Assumptions", "Year"], [:number, "0"]]]
MAX(-SUM(I.a.Inputs[2007])-F$80, 0)"	[:function, "MAX", [:arithmetic, [:prefix, "-", [:function, "SUM", [:table_reference, "I.a.Inputs", "2007"]]], [:operator, "-"], [:cell, "F$80"]], [:number, "0"]]
DeptSales_101[Sale Amount]"	[:table_reference, "DeptSales_101", "Sale Amount"]
EF.I.a.PM10[2010]	[:table_reference, "EF.I.a.PM10", "2010"]
G.40.levels.efficiency[[Description]:[Description]] [:table_reference, "G.40.levels.efficiency", "[Description]:[Description]"]
Sector.codes[[Description ]]  [:table_reference, "Sector.codes", "Description "]

# parses local structured references (i.e., [column])
[Sale Amount]"	[:local_table_reference, "Sale Amount"]

# parses infix modifiers in edge cases
(-'DUKES 09 (2.5)'!$B$25)	[:brackets, [:prefix, "-", [:sheet_reference, "DUKES 09 (2.5)", [:cell, "$B$25"]]]]

-(INDEX(INDIRECT(BI$19&"!Year.Matrix"), MATCH("Subtotal.Supply", INDIRECT(BI$19&"!Year.Modules"), 0), MATCH("V.04", INDIRECT(BI$19&"!Year.Vectors"), 0))+INDEX(INDIRECT(BI$19&"!Year.Matrix"),MATCH("Subtotal.Consumption",INDIRECT(BI$19&"!Year.Modules"), 0),MATCH("V.04",INDIRECT(BI$19&"!Year.Vectors"), 0)))	[:prefix, "-", [:brackets, [:arithmetic, [:function, "INDEX", [:function, "INDIRECT", [:string_join, [:cell, "BI$19"], [:string, "!Year.Matrix"]]], [:function, "MATCH", [:string, "Subtotal.Supply"], [:function, "INDIRECT", [:string_join, [:cell, "BI$19"], [:string, "!Year.Modules"]]], [:number, "0"]], [:function, "MATCH", [:string, "V.04"], [:function, "INDIRECT", [:string_join, [:cell, "BI$19"], [:string, "!Year.Vectors"]]], [:number, "0"]]], [:operator, "+"], [:function, "INDEX", [:function, "INDIRECT", [:string_join, [:cell, "BI$19"], [:string, "!Year.Matrix"]]], [:function, "MATCH", [:string, "Subtotal.Consumption"], [:function, "INDIRECT", [:string_join, [:cell, "BI$19"], [:string, "!Year.Modules"]]], [:number, "0"]], [:function, "MATCH", [:string, "V.04"], [:function, "INDIRECT", [:string_join, [:cell, "BI$19"], [:string, "!Year.Vectors"]]], [:number, "0"]]]]]]
MAX(MIN(F121, -F22), 0)"	[:function, "MAX", [:function, "MIN", [:cell, "F121"], [:prefix, "-", [:cell, "F22"]]], [:number, "0"]]
IFERROR(INDEX(INDIRECT($C102&".Outputs["&this.Year&"]"), MATCH(Z$5, INDIRECT($C102&".Outputs[Vector]"), 0)), 0)'	[:function, "IFERROR", [:function, "INDEX", [:function, "INDIRECT", [:string_join, [:cell, "$C102"], [:string, ".Outputs["], [:named_reference, "this.Year"], [:string, "]"]]], [:function, "MATCH", [:cell, "Z$5"], [:function, "INDIRECT", [:string_join, [:cell, "$C102"], [:string, ".Outputs[Vector]"]]], [:number, "0"]]], [:number, "0"]]
INDIRECT($C102&".Outputs["&this.Year&"]")	[:function, "INDIRECT", [:string_join, [:cell, "$C102"], [:string, ".Outputs["], [:named_reference, "this.Year"], [:string, "]"]]]

# parses formulas with spaces
(13.56 / 96935) * EF.IndustrialCoal.CO2 * GWP.CH4	[:arithmetic, [:brackets, [:arithmetic, [:number, "13.56"], [:operator, "/"], [:number, "96935"]]], [:operator, "*"], [:named_reference, "EF.IndustrialCoal.CO2"], [:operator, "*"], [:named_reference, "GWP.CH4"]]
"per " & Preferences.EnergyUnits	[:string_join, [:string, "per "], [:named_reference, "Preferences.EnergyUnits"]]
 0.00403/$F$76	[:arithmetic, [:number, "0.00403"], [:operator, "/"], [:cell, "$F$76"]]
SUMIFS(INDEX($G$62:$J$73, , MATCH($E$11, $G$61:$J$61, 0)), $C$62:$C$73, $C195, $D$62:$D$73, $D195)	[:function, "SUMIFS", [:function, "INDEX", [:area, "$G$62", "$J$73"], [:null], [:function, "MATCH", [:cell, "$E$11"], [:area, "$G$61", "$J$61"], [:number, "0"]]], [:area, "$C$62", "$C$73"], [:cell, "$C195"], [:area, "$D$62", "$D$73"], [:cell, "$D195"]]

# parses formulas that use table range references
SUM(EF[[#This Row],[CO2]:[N2O]])	[:function, "SUM", [:table_reference, "EF", "[#This Row],[CO2]:[N2O]"]]

# parses buggy references
'Calcs'!a17	[:sheet_reference, "Calcs", [:cell, "a17"]]
'Calcs'!aone2	[:sheet_reference, "Calcs", [:named_reference, "aone2"]]

# parses tricky indirect match table combos
INDEX(INDIRECT("'"&XVI.a.Inputs[#Headers]&"'!Year.Matrix"), MATCH("Subtotal."&$A$2, INDIRECT("'"&XVI.a.Inputs[#Headers]&"'!Year.Modules"), 0), MATCH([Vector], INDIRECT("'"&XVI.a.Inputs[#Headers]&"'!Year.Vectors"), 0))	[:function, "INDEX", [:function, "INDIRECT", [:string_join, [:string, "'"], [:table_reference, "XVI.a.Inputs", "#Headers"], [:string, "'!Year.Matrix"]]], [:function, "MATCH", [:string_join, [:string, "Subtotal."], [:cell, "$A$2"]], [:function, "INDIRECT", [:string_join, [:string, "'"], [:table_reference, "XVI.a.Inputs", "#Headers"], [:string, "'!Year.Modules"]]], [:number, "0"]], [:function, "MATCH", [:local_table_reference, "Vector"], [:function, "INDIRECT", [:string_join, [:string, "'"], [:table_reference, "XVI.a.Inputs", "#Headers"], [:string, "'!Year.Vectors"]]], [:number, "0"]]]

# Parses array literals
{1}	[:array,[:row,[:number,"1"]]]
{1,2,3}	[:array,[:row,[:number,"1"],[:number,"2"],[:number,"3"]]]
{1;2;3} [:array,[:row,[:number,"1"]],[:row,[:number,"2"]],[:row,[:number,"3"]]]
{1,2,3;4,5,6}	[:array,[:row,[:number,"1"],[:number,"2"],[:number,"3"]],[:row,[:number,"4"],[:number,"5"],[:number,"6"]]]
{ 1 , 2 , 3 ; 4 , 5 , 6 }	[:array,[:row,[:number,"1"],[:number,"2"],[:number,"3"]],[:row,[:number,"4"],[:number,"5"],[:number,"6"]]]
SUM({1,2,3})	[:function,"SUM",[:array,[:row,[:number,"1"],[:number,"2"],[:number,"3"]]]]
{1,2,3}*{4,5,6}	[:arithmetic,[:array,[:row,[:number,"1"],[:number,"2"],[:number,"3"]]],[:operator,"*"],[:array,[:row,[:number,"4"],[:number,"5"],[:number,"6"]]]]

# Parses errors
#REF!/#REF!  [:arithmetic, [:error, "#REF!"], [:operator, "/"], [:error, "#REF!"]]
#NAME?  [:error, "#NAME?"]
#VALUE! [:error, "#VALUE!"]
#DIV/0! [:error, "#DIV/0!"]
#N/A  [:error, "#N/A"]
#NUM! [:error, "#NUM!"]

# Parses arithmetic on names
CH4.as.CO2e	[:named_reference, 'CH4.as.CO2e']
446.85181935425*(unit.Mt/CH4.as.CO2e)	[:arithmetic, [:number, "446.85181935425"], [:operator, "*"], [:brackets, [:arithmetic, [:named_reference, "unit.Mt"], [:operator, "/"], [:named_reference, "CH4.as.CO2e"]]]]

IND.Tech!$AJ$93:$DC$93	[:sheet_reference, "IND.Tech", [:area, "$AJ$93", "$DC$93"]]
(IND.Tech!$AJ$93:$DC$93=F$32)	[:brackets, [:comparison, [:sheet_reference, "IND.Tech", [:area, "$AJ$93", "$DC$93"]], [:comparator, "="], [:cell, "F$32"]]]
(IND.Tech!$AJ$94:$DC$94=$F$31)*(IND.Tech!$AJ$93:$DC$93=F$32)*(IND.Tech!$AI$94:$AI$253=$C33&$A$1&$E33)*(IND.Tech!$AJ$94:$DC$253)	[:arithmetic, [:brackets, [:comparison, [:sheet_reference, "IND.Tech", [:area, "$AJ$94", "$DC$94"]], [:comparator, "="], [:cell, "$F$31"]]], [:operator, "*"], [:brackets, [:comparison, [:sheet_reference, "IND.Tech", [:area, "$AJ$93", "$DC$93"]], [:comparator, "="], [:cell, "F$32"]]], [:operator, "*"], [:brackets, [:comparison, [:sheet_reference, "IND.Tech", [:area, "$AI$94", "$AI$253"]], [:comparator, "="], [:string_join, [:cell, "$C33"], [:cell, "$A$1"], [:cell, "$E33"]]]], [:operator, "*"], [:brackets, [:sheet_reference, "IND.Tech", [:area, "$AJ$94", "$DC$253"]]]]
IFERROR((IND.Tech!$AJ$94:$DC$94=$F$31)*(IND.Tech!$AJ$93:$DC$93=F$32)*(IND.Tech!$AI$94:$AI$253=$C33&$A$1&$E33)*(IND.Tech!$AJ$94:$DC$253),0)	[:function, "IFERROR", [:arithmetic, [:brackets, [:comparison, [:sheet_reference, "IND.Tech", [:area, "$AJ$94", "$DC$94"]], [:comparator, "="], [:cell, "$F$31"]]], [:operator, "*"], [:brackets, [:comparison, [:sheet_reference, "IND.Tech", [:area, "$AJ$93", "$DC$93"]], [:comparator, "="], [:cell, "F$32"]]], [:operator, "*"], [:brackets, [:comparison, [:sheet_reference, "IND.Tech", [:area, "$AI$94", "$AI$253"]], [:comparator, "="], [:string_join, [:cell, "$C33"], [:cell, "$A$1"], [:cell, "$E33"]]]], [:operator, "*"], [:brackets, [:sheet_reference, "IND.Tech", [:area, "$AJ$94", "$DC$253"]]]], [:number, "0"]]
SUM(IFERROR((IND.Tech!$AJ$94:$DC$94=$F$31)*(IND.Tech!$AJ$93:$DC$93=F$32)*(IND.Tech!$AI$94:$AI$253=$C33&$A$1&$E33)*(IND.Tech!$AJ$94:$DC$253),0))	[:function, "SUM", [:function, "IFERROR", [:arithmetic, [:brackets, [:comparison, [:sheet_reference, "IND.Tech", [:area, "$AJ$94", "$DC$94"]], [:comparator, "="], [:cell, "$F$31"]]], [:operator, "*"], [:brackets, [:comparison, [:sheet_reference, "IND.Tech", [:area, "$AJ$93", "$DC$93"]], [:comparator, "="], [:cell, "F$32"]]], [:operator, "*"], [:brackets, [:comparison, [:sheet_reference, "IND.Tech", [:area, "$AI$94", "$AI$253"]], [:comparator, "="], [:string_join, [:cell, "$C33"], [:cell, "$A$1"], [:cell, "$E33"]]]], [:operator, "*"], [:brackets, [:sheet_reference, "IND.Tech", [:area, "$AJ$94", "$DC$253"]]]], [:number, "0"]]]

# Parses percent suffixes
ROUND(24.35,0)%	[:percentage, [:function, "ROUND", [:number, "24.35"], [:number, "0"]]]

# Parses LOG10 functions
LOG10(300)	[:function, "LOG10", [:number, "300"]]

# Parses _xlfn. prefixed functions
_xlfn.FORECAST.LINEAR(10,A1,A2) [:function, "_xlfn.FORECAST.LINEAR", [:number, "10"], [:cell, "A1"], [:cell, "A2"]]
_xlfn.CEILING.MATH() [:function, "_xlfn.CEILING.MATH"]
# Parses named references with periods in
named.reference [:named_reference, "named.reference"]

# Parses function names with periods in
NAMED.FUNCTION()  [:function, "NAMED.FUNCTION"]

# Parses lower case function names (user defined, typically)
curve()  [:function, "curve"]

# But leaves identical names alone
curve [:named_reference, "curve"]
